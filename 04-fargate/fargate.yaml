# Setup Fargate Private Subnet, Public Load Balancer
#
# Based on  template at https://github.com/nathanpeck/aws-cloudformation-fargate

AWSTemplateFormatVersion: '2010-09-09'

Description: Setup ECS cluster on AWS Fargate, hosted in a private subnet.
             Accessible via a public load balancer.
             Setup supporting ECR container registry.

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
  PublicSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  PrivateSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  ServiceName:
    Type: String
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image for the Task. 
        To be updated when a new image is pushed into ECR.
  DbEndpointParameterName:
    Type: String
    Default: UPDATE_ME
  DbSecretName:
    Type: String
    Default: UPDATE_ME

  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:

  # The ECS cluster itself.
  ECSCluster:
    Type: AWS::ECS::Cluster

  # The service within the cluster.
  # The service runs multiple copies of a task, 
  # and ensures a desired number of copies are running. 
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: "1.3.0"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [ !Ref PrivateSecurityGroupId ]
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref AppRole
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-stream-prefix: !Ref 'ServiceName'
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: DB_ENDPOINT_PARAMETER_NAME
              Value: !Ref DbEndpointParameterName
            - Name: DB_SECRET_NAME
              Value: !Ref DbSecretName

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      ## LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  # Application Tasks role to make API requests to authorized AWS services. 
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-policy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ssm:*'
                - 'secretsmanager:*'
                - 's3:*'
              Resource: '*'

  # Role used by ECS tasks to pull from ECR and push to CloudWatch
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  # Load Balancer for Fargate service
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets:
        # The load balancer is placed into the private subnets, for access via PrivateLink
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'

  # A Load Balancer target group. 
  # This is used for keeping track of backend tasks for traffic distribution.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref 'ServiceName'
      VpcId: !Ref VpcId
      Protocol: TCP
      Port: !Ref 'ContainerPort'
      TargetType: ip

  VPCEndpointService:
    Type: AWS::EC2::VPCEndpointService
    DependsOn: LoadBalancer
    Properties: 
      NetworkLoadBalancerArns: 
        - !Ref LoadBalancer

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
  ECSClusterName:
    Value: !Ref ECSCluster
  ServiceName:
    Value: !GetAtt Service.Name
  TaskDefinitionArn:
    Value: !Ref TaskDefinition
  VPCEndpointService:
    Value: !Ref VPCEndpointService
