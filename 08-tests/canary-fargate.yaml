# Setup Canary container cluster

AWSTemplateFormatVersion: '2010-09-09'

Description: Setup Canary ECS cluster on AWS Fargate.

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PublicSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  ServiceName:
    Type: String
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image for the Task. 
        To be updated when a new image is pushed into ECR.
  apiEndpoint:
    Type: String
  canaryIterations:
    Type: Number
  testIterations:
    Type: Number
  delayRequestMs:
    Type: Number
  metricNamespace:
    Type: String
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:

  # The ECS cluster itself.
  ECSCluster:
    Type: AWS::ECS::Cluster

  # The service within the cluster.
  # The service runs multiple copies of a task, 
  # and ensures a desired number of copies are running. 
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: "1.3.0"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [ !Ref PublicSecurityGroupId ]
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref 'TaskDefinition'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref AppRole
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-stream-prefix: !Ref 'ServiceName'
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: API_ENDPOINT
              Value: !Ref apiEndpoint
            - Name: CANARY_ITERATIONS
              Value: !Ref canaryIterations
            - Name: TEST_ITERATIONS
              Value: !Ref testIterations
            - Name: DELAY_REQUEST_MS
              Value: !Ref delayRequestMs
            - Name: METRIC_NAMESPACE
              Value: !Ref metricNamespace

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      ## LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  # Application Tasks role to make API requests to authorized AWS services. 
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-policy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'cloudwatch:PutMetricData'
              Resource: '*'

  # Role used by ECS tasks to pull from ECR and push to CloudWatch
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

Outputs:
  ECSClusterName:
    Value: !Ref ECSCluster
  ServiceName:
    Value: !GetAtt Service.Name
  TaskDefinitionArn:
    Value: !Ref TaskDefinition

