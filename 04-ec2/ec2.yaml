---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Linux with CloudWatchAgent and CodeDeploy Agent'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.nano
  InstanceAMI:
    Description: Amazon Linux AMI ID
    Type : AWS::EC2::Image::Id
    Default: ami-048a01c78f7bae4aa
  VpcId:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
  PublicSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  PrivateSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  SSMKey:
    Type: String
    Default: AmazonCloudWatch-linux

Resources:

  MyLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 03_restart_amazon-cloudwatch-agent
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command:
                Fn::Sub:
                  - |
                    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
                  - { ssmkey: !Ref SSMKey }
          packages:
            yum:
              mysql: []
    Properties:
      LaunchTemplateData: 
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub "${AWS::StackName}-instance"
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: 20
        IamInstanceProfile: 
          Arn: !GetAtt "MyInstanceProfile.Arn"
        UserData:
          Fn::Base64: !Sub |
                 #!/bin/bash
                 # install Cloudwatch agent            
                 rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
                 /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${SSMKey} -s
                 # CFN init setup
                 /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource MyAutoScalingGroup --region ${AWS::Region} --configsets default
                 # install CodeDeploy
                 yum install -y ruby
                 cd /home/ec2-user
                 curl -O https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
                 chmod +x ./install
                 ./install auto
                 # CFN signal completion status
                 # TODO this appears broken...
                 /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource MyAutoScalingGroup --region ${AWS::Region}

        SecurityGroupIds:
          - !Ref PrivateSecurityGroupId
        KeyName: !Ref KeyName 
        ImageId: !Ref InstanceAMI
        InstanceType: !Ref InstanceType
        #Monitoring: todo

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    #CreationPolicy:
    #  ResourceSignal:
    #    Timeout: PT15M
    #    Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: false
    Properties:
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate 
        Version: '22'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance"
          PropagateAtLaunch: true

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref Ec2IamRole

  Ec2IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-Ec2IamPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:Get*"
                  - "cloudformation:SignalResource"
                Resource: "*" 

  # Public Load Balancer for Autoscaling group 
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: [!Ref PublicSecurityGroupId]

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  # A Load Balancer target group. 
  # This is used for keeping track of backend tasks for traffic distribution.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #HealthCheckIntervalSeconds: 15
      #HealthCheckPath: /
      #HealthCheckProtocol: HTTP
      #HealthCheckTimeoutSeconds: 3
      #HealthyThresholdCount: 2
      TargetType: instance
      #Name: !Ref 'ServiceName'
      Port: 80
      Protocol: HTTP
      #UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      #TargetGroupAttributes:
      #  - Key: deregistration_delay.timeout_seconds
      #    Value: 60

  # Rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [ "*" ]
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt PublicLoadBalancer.DNSName
  AutoscalingGroupName:
    Description: Autoscaling Group Name
    Value:
      Ref: MyAutoScalingGroup
  LaunchTemplate:
    Description: Launch Template
    Value:
      Ref: MyLaunchTemplate
  